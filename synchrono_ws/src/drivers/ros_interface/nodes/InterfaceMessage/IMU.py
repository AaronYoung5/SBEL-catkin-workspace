# automatically generated by the FlatBuffers compiler, do not modify

# namespace: InterfaceMessage

import flatbuffers

class IMU(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsIMU(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IMU()
        x.Init(buf, n + offset)
        return x

    # IMU
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # IMU
    def Accel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # IMU
    def AccelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # IMU
    def AccelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IMU
    def Roll(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # IMU
    def Pitch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # IMU
    def Yaw(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def IMUStart(builder): builder.StartObject(4)
def IMUAddAccel(builder, accel): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(accel), 0)
def IMUStartAccelVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def IMUAddRoll(builder, roll): builder.PrependFloat64Slot(1, roll, 0.0)
def IMUAddPitch(builder, pitch): builder.PrependFloat64Slot(2, pitch, 0.0)
def IMUAddYaw(builder, yaw): builder.PrependFloat64Slot(3, yaw, 0.0)
def IMUEnd(builder): return builder.EndObject()
