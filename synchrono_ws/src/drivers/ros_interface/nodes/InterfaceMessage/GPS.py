# automatically generated by the FlatBuffers compiler, do not modify

# namespace: InterfaceMessage

import flatbuffers

class GPS(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsGPS(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GPS()
        x.Init(buf, n + offset)
        return x

    # GPS
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GPS
    def Latitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # GPS
    def Longitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # GPS
    def Altitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def GPSStart(builder): builder.StartObject(3)
def GPSAddLatitude(builder, latitude): builder.PrependFloat64Slot(0, latitude, 0.0)
def GPSAddLongitude(builder, longitude): builder.PrependFloat64Slot(1, longitude, 0.0)
def GPSAddAltitude(builder, altitude): builder.PrependFloat64Slot(2, altitude, 0.0)
def GPSEnd(builder): return builder.EndObject()
