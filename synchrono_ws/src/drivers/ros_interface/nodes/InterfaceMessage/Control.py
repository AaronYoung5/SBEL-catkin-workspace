# automatically generated by the FlatBuffers compiler, do not modify

# namespace: InterfaceMessage

import flatbuffers

class Control(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsControl(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Control()
        x.Init(buf, n + offset)
        return x

    # Control
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Control
    def Throttle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Control
    def Steering(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Control
    def Braking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def ControlStart(builder): builder.StartObject(3)
def ControlAddThrottle(builder, throttle): builder.PrependFloat32Slot(0, throttle, 0.0)
def ControlAddSteering(builder, steering): builder.PrependFloat32Slot(1, steering, 0.0)
def ControlAddBraking(builder, braking): builder.PrependFloat32Slot(2, braking, 0.0)
def ControlEnd(builder): return builder.EndObject()
