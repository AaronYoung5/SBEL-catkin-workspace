// Generated by gencpp from file chrono_ros_interface/Cones.msg
// DO NOT EDIT!


#ifndef CHRONO_ROS_INTERFACE_MESSAGE_CONES_H
#define CHRONO_ROS_INTERFACE_MESSAGE_CONES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseStamped.h>
#include <std_msgs/Int16.h>

namespace chrono_ros_interface
{
template <class ContainerAllocator>
struct Cones_
{
  typedef Cones_<ContainerAllocator> Type;

  Cones_()
    : header()
    , blue_cones()
    , yellow_cones()
    , size()  {
    }
  Cones_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , blue_cones(_alloc)
    , yellow_cones(_alloc)
    , size(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::geometry_msgs::PoseStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::other >  _blue_cones_type;
  _blue_cones_type blue_cones;

   typedef std::vector< ::geometry_msgs::PoseStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::other >  _yellow_cones_type;
  _yellow_cones_type yellow_cones;

   typedef  ::std_msgs::Int16_<ContainerAllocator>  _size_type;
  _size_type size;





  typedef boost::shared_ptr< ::chrono_ros_interface::Cones_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::chrono_ros_interface::Cones_<ContainerAllocator> const> ConstPtr;

}; // struct Cones_

typedef ::chrono_ros_interface::Cones_<std::allocator<void> > Cones;

typedef boost::shared_ptr< ::chrono_ros_interface::Cones > ConesPtr;
typedef boost::shared_ptr< ::chrono_ros_interface::Cones const> ConesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::chrono_ros_interface::Cones_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::chrono_ros_interface::Cones_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace chrono_ros_interface

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'chrono_ros_interface': ['/home/aaron/ROS/udp_workspace/src/chrono_ros_interface/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::chrono_ros_interface::Cones_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::chrono_ros_interface::Cones_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chrono_ros_interface::Cones_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chrono_ros_interface::Cones_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chrono_ros_interface::Cones_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chrono_ros_interface::Cones_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::chrono_ros_interface::Cones_<ContainerAllocator> >
{
  static const char* value()
  {
    return "66302a9cec1053e5e1d2dec8fe6c53d1";
  }

  static const char* value(const ::chrono_ros_interface::Cones_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x66302a9cec1053e5ULL;
  static const uint64_t static_value2 = 0xe1d2dec8fe6c53d1ULL;
};

template<class ContainerAllocator>
struct DataType< ::chrono_ros_interface::Cones_<ContainerAllocator> >
{
  static const char* value()
  {
    return "chrono_ros_interface/Cones";
  }

  static const char* value(const ::chrono_ros_interface::Cones_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::chrono_ros_interface::Cones_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Similar to nav_msgs/Path.msg, but has two paths (blue and yellow)\n"
"# Positions are relative to the vehicle, not global\n"
"Header header\n"
"geometry_msgs/PoseStamped[] blue_cones\n"
"geometry_msgs/PoseStamped[] yellow_cones\n"
"std_msgs/Int16 size\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Int16\n"
"int16 data\n"
;
  }

  static const char* value(const ::chrono_ros_interface::Cones_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::chrono_ros_interface::Cones_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.blue_cones);
      stream.next(m.yellow_cones);
      stream.next(m.size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Cones_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::chrono_ros_interface::Cones_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::chrono_ros_interface::Cones_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "blue_cones[]" << std::endl;
    for (size_t i = 0; i < v.blue_cones.size(); ++i)
    {
      s << indent << "  blue_cones[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "    ", v.blue_cones[i]);
    }
    s << indent << "yellow_cones[]" << std::endl;
    for (size_t i = 0; i < v.yellow_cones.size(); ++i)
    {
      s << indent << "  yellow_cones[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "    ", v.yellow_cones[i]);
    }
    s << indent << "size: ";
    s << std::endl;
    Printer< ::std_msgs::Int16_<ContainerAllocator> >::stream(s, indent + "  ", v.size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CHRONO_ROS_INTERFACE_MESSAGE_CONES_H
