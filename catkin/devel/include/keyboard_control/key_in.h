// Generated by gencpp from file keyboard_control/key_in.msg
// DO NOT EDIT!


#ifndef KEYBOARD_CONTROL_MESSAGE_KEY_IN_H
#define KEYBOARD_CONTROL_MESSAGE_KEY_IN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace keyboard_control
{
template <class ContainerAllocator>
struct key_in_
{
  typedef key_in_<ContainerAllocator> Type;

  key_in_()
    : keycode(0)  {
    }
  key_in_(const ContainerAllocator& _alloc)
    : keycode(0)  {
  (void)_alloc;
    }



   typedef int8_t _keycode_type;
  _keycode_type keycode;





  typedef boost::shared_ptr< ::keyboard_control::key_in_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::keyboard_control::key_in_<ContainerAllocator> const> ConstPtr;

}; // struct key_in_

typedef ::keyboard_control::key_in_<std::allocator<void> > key_in;

typedef boost::shared_ptr< ::keyboard_control::key_in > key_inPtr;
typedef boost::shared_ptr< ::keyboard_control::key_in const> key_inConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::keyboard_control::key_in_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::keyboard_control::key_in_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace keyboard_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'keyboard_control': ['/home/aaron/ROS/catkin/src/keyboard_control/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::keyboard_control::key_in_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::keyboard_control::key_in_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::keyboard_control::key_in_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::keyboard_control::key_in_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::keyboard_control::key_in_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::keyboard_control::key_in_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::keyboard_control::key_in_<ContainerAllocator> >
{
  static const char* value()
  {
    return "622b0edfae335c0cbebcebf432e2cce0";
  }

  static const char* value(const ::keyboard_control::key_in_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x622b0edfae335c0cULL;
  static const uint64_t static_value2 = 0xbebcebf432e2cce0ULL;
};

template<class ContainerAllocator>
struct DataType< ::keyboard_control::key_in_<ContainerAllocator> >
{
  static const char* value()
  {
    return "keyboard_control/key_in";
  }

  static const char* value(const ::keyboard_control::key_in_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::keyboard_control::key_in_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 keycode\n"
;
  }

  static const char* value(const ::keyboard_control::key_in_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::keyboard_control::key_in_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.keycode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct key_in_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::keyboard_control::key_in_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::keyboard_control::key_in_<ContainerAllocator>& v)
  {
    s << indent << "keycode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.keycode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KEYBOARD_CONTROL_MESSAGE_KEY_IN_H
