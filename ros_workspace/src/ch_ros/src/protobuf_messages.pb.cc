// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf_messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ch_ros/protobuf_messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ChronoMessages {

namespace {

const ::google::protobuf::Descriptor* Vector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector_reflection_ = NULL;
const ::google::protobuf::Descriptor* lidar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lidar_reflection_ = NULL;
const ::google::protobuf::Descriptor* gps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gps_reflection_ = NULL;
const ::google::protobuf::Descriptor* imu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  imu_reflection_ = NULL;
const ::google::protobuf::Descriptor* vehicle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vehicle_reflection_ = NULL;
const ::google::protobuf::Descriptor* control_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  control_reflection_ = NULL;
const ::google::protobuf::Descriptor* time_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  time_reflection_ = NULL;
const ::google::protobuf::Descriptor* light_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  light_reflection_ = NULL;
const ::google::protobuf::Descriptor* cones_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cones_reflection_ = NULL;
const ::google::protobuf::Descriptor* exit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  exit_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protobuf_5fmessages_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_protobuf_5fmessages_2eproto() {
  protobuf_AddDesc_protobuf_5fmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protobuf_messages.proto");
  GOOGLE_CHECK(file != NULL);
  Vector_descriptor_ = file->message_type(0);
  static const int Vector_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, z_),
  };
  Vector_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vector_descriptor_,
      Vector::default_instance_,
      Vector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, _has_bits_[0]),
      -1,
      -1,
      sizeof(Vector),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, _internal_metadata_),
      -1);
  lidar_descriptor_ = file->message_type(1);
  static const int lidar_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lidar, points_),
  };
  lidar_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      lidar_descriptor_,
      lidar::default_instance_,
      lidar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lidar, _has_bits_[0]),
      -1,
      -1,
      sizeof(lidar),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lidar, _internal_metadata_),
      -1);
  gps_descriptor_ = file->message_type(2);
  static const int gps_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gps, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gps, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gps, altitude_),
  };
  gps_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      gps_descriptor_,
      gps::default_instance_,
      gps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gps, _has_bits_[0]),
      -1,
      -1,
      sizeof(gps),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gps, _internal_metadata_),
      -1);
  imu_descriptor_ = file->message_type(3);
  static const int imu_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imu, angular_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imu, linear_acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imu, orientation_),
  };
  imu_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      imu_descriptor_,
      imu::default_instance_,
      imu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imu, _has_bits_[0]),
      -1,
      -1,
      sizeof(imu),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imu, _internal_metadata_),
      -1);
  vehicle_descriptor_ = file->message_type(4);
  static const int vehicle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vehicle, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vehicle, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vehicle, z_),
  };
  vehicle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      vehicle_descriptor_,
      vehicle::default_instance_,
      vehicle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vehicle, _has_bits_[0]),
      -1,
      -1,
      sizeof(vehicle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vehicle, _internal_metadata_),
      -1);
  control_descriptor_ = file->message_type(5);
  static const int control_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(control, throttle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(control, steering_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(control, braking_),
  };
  control_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      control_descriptor_,
      control::default_instance_,
      control_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(control, _has_bits_[0]),
      -1,
      -1,
      sizeof(control),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(control, _internal_metadata_),
      -1);
  time_descriptor_ = file->message_type(6);
  static const int time_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time, t_),
  };
  time_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      time_descriptor_,
      time::default_instance_,
      time_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time, _has_bits_[0]),
      -1,
      -1,
      sizeof(time),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(time, _internal_metadata_),
      -1);
  light_descriptor_ = file->message_type(7);
  static const int light_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(light, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(light, ypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(light, xdir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(light, ydir_),
  };
  light_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      light_descriptor_,
      light::default_instance_,
      light_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(light, _has_bits_[0]),
      -1,
      -1,
      sizeof(light),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(light, _internal_metadata_),
      -1);
  cones_descriptor_ = file->message_type(8);
  static const int cones_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cones, blue_cones_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cones, yellow_cones_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cones, orange_cones_),
  };
  cones_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      cones_descriptor_,
      cones::default_instance_,
      cones_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cones, _has_bits_[0]),
      -1,
      -1,
      sizeof(cones),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cones, _internal_metadata_),
      -1);
  exit_descriptor_ = file->message_type(9);
  static const int exit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit, code_),
  };
  exit_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      exit_descriptor_,
      exit::default_instance_,
      exit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit, _has_bits_[0]),
      -1,
      -1,
      sizeof(exit),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protobuf_5fmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vector_descriptor_, &Vector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      lidar_descriptor_, &lidar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      gps_descriptor_, &gps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      imu_descriptor_, &imu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      vehicle_descriptor_, &vehicle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      control_descriptor_, &control::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      time_descriptor_, &time::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      light_descriptor_, &light::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      cones_descriptor_, &cones::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      exit_descriptor_, &exit::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protobuf_5fmessages_2eproto() {
  delete Vector::default_instance_;
  delete Vector_reflection_;
  delete lidar::default_instance_;
  delete lidar_reflection_;
  delete gps::default_instance_;
  delete gps_reflection_;
  delete imu::default_instance_;
  delete imu_reflection_;
  delete vehicle::default_instance_;
  delete vehicle_reflection_;
  delete control::default_instance_;
  delete control_reflection_;
  delete time::default_instance_;
  delete time_reflection_;
  delete light::default_instance_;
  delete light_reflection_;
  delete cones::default_instance_;
  delete cones_reflection_;
  delete exit::default_instance_;
  delete exit_reflection_;
}

void protobuf_AddDesc_protobuf_5fmessages_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_protobuf_5fmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027protobuf_messages.proto\022\016ChronoMessage"
    "s\")\n\006Vector\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003"
    " \002(\002\"/\n\005lidar\022&\n\006points\030\001 \003(\0132\026.ChronoMe"
    "ssages.Vector\"<\n\003gps\022\021\n\tlongitude\030\001 \002(\001\022"
    "\020\n\010latitude\030\002 \002(\001\022\020\n\010altitude\030\003 \002(\001\"\231\001\n\003"
    "imu\0220\n\020angular_velocity\030\001 \002(\0132\026.ChronoMe"
    "ssages.Vector\0223\n\023linear_acceleration\030\002 \002"
    "(\0132\026.ChronoMessages.Vector\022+\n\013orientatio"
    "n\030\003 \002(\0132\026.ChronoMessages.Vector\"*\n\007vehic"
    "le\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\t\n\001z\030\003 \002(\001\">\n\007c"
    "ontrol\022\020\n\010throttle\030\001 \002(\001\022\020\n\010steering\030\002 \002"
    "(\001\022\017\n\007braking\030\003 \002(\001\"\021\n\004time\022\t\n\001t\030\001 \002(\001\"\?"
    "\n\005light\022\014\n\004xpos\030\001 \002(\001\022\014\n\004ypos\030\002 \002(\001\022\014\n\004x"
    "dir\030\003 \002(\001\022\014\n\004ydir\030\004 \002(\001\"\217\001\n\005cones\022*\n\nblu"
    "e_cones\030\001 \003(\0132\026.ChronoMessages.Vector\022,\n"
    "\014yellow_cones\030\002 \003(\0132\026.ChronoMessages.Vec"
    "tor\022,\n\014orange_cones\030\003 \003(\0132\026.ChronoMessag"
    "es.Vector\"\024\n\004exit\022\014\n\004code\030\001 \002(\t", 711);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protobuf_messages.proto", &protobuf_RegisterTypes);
  Vector::default_instance_ = new Vector();
  lidar::default_instance_ = new lidar();
  gps::default_instance_ = new gps();
  imu::default_instance_ = new imu();
  vehicle::default_instance_ = new vehicle();
  control::default_instance_ = new control();
  time::default_instance_ = new time();
  light::default_instance_ = new light();
  cones::default_instance_ = new cones();
  exit::default_instance_ = new exit();
  Vector::default_instance_->InitAsDefaultInstance();
  lidar::default_instance_->InitAsDefaultInstance();
  gps::default_instance_->InitAsDefaultInstance();
  imu::default_instance_->InitAsDefaultInstance();
  vehicle::default_instance_->InitAsDefaultInstance();
  control::default_instance_->InitAsDefaultInstance();
  time::default_instance_->InitAsDefaultInstance();
  light::default_instance_->InitAsDefaultInstance();
  cones::default_instance_->InitAsDefaultInstance();
  exit::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protobuf_5fmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protobuf_5fmessages_2eproto {
  StaticDescriptorInitializer_protobuf_5fmessages_2eproto() {
    protobuf_AddDesc_protobuf_5fmessages_2eproto();
  }
} static_descriptor_initializer_protobuf_5fmessages_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector::kXFieldNumber;
const int Vector::kYFieldNumber;
const int Vector::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector::Vector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChronoMessages.Vector)
}

void Vector::InitAsDefaultInstance() {
}

Vector::Vector(const Vector& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChronoMessages.Vector)
}

void Vector::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector::~Vector() {
  // @@protoc_insertion_point(destructor:ChronoMessages.Vector)
  SharedDtor();
}

void Vector::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector_descriptor_;
}

const Vector& Vector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_5fmessages_2eproto();
  return *default_instance_;
}

Vector* Vector::default_instance_ = NULL;

Vector* Vector::New(::google::protobuf::Arena* arena) const {
  Vector* n = new Vector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector::Clear() {
// @@protoc_insertion_point(message_clear_start:ChronoMessages.Vector)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Vector, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Vector*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Vector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChronoMessages.Vector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // required float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChronoMessages.Vector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChronoMessages.Vector)
  return false;
#undef DO_
}

void Vector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChronoMessages.Vector)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ChronoMessages.Vector)
}

::google::protobuf::uint8* Vector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChronoMessages.Vector)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChronoMessages.Vector)
  return target;
}

int Vector::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ChronoMessages.Vector)
  int total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (has_z()) {
    // required float z = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
int Vector::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ChronoMessages.Vector)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float z = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChronoMessages.Vector)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Vector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChronoMessages.Vector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChronoMessages.Vector)
    MergeFrom(*source);
  }
}

void Vector::MergeFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChronoMessages.Vector)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Vector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChronoMessages.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector::CopyFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChronoMessages.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Vector::Swap(Vector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector::InternalSwap(Vector* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector_descriptor_;
  metadata.reflection = Vector_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector

// required float x = 1;
bool Vector::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Vector::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Vector::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Vector::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float Vector::x() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.Vector.x)
  return x_;
}
 void Vector::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.Vector.x)
}

// required float y = 2;
bool Vector::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Vector::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Vector::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Vector::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float Vector::y() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.Vector.y)
  return y_;
}
 void Vector::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.Vector.y)
}

// required float z = 3;
bool Vector::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Vector::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Vector::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Vector::clear_z() {
  z_ = 0;
  clear_has_z();
}
 float Vector::z() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.Vector.z)
  return z_;
}
 void Vector::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.Vector.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int lidar::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

lidar::lidar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChronoMessages.lidar)
}

void lidar::InitAsDefaultInstance() {
}

lidar::lidar(const lidar& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChronoMessages.lidar)
}

void lidar::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lidar::~lidar() {
  // @@protoc_insertion_point(destructor:ChronoMessages.lidar)
  SharedDtor();
}

void lidar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void lidar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lidar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lidar_descriptor_;
}

const lidar& lidar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_5fmessages_2eproto();
  return *default_instance_;
}

lidar* lidar::default_instance_ = NULL;

lidar* lidar::New(::google::protobuf::Arena* arena) const {
  lidar* n = new lidar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void lidar::Clear() {
// @@protoc_insertion_point(message_clear_start:ChronoMessages.lidar)
  points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool lidar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChronoMessages.lidar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ChronoMessages.Vector points = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_points;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChronoMessages.lidar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChronoMessages.lidar)
  return false;
#undef DO_
}

void lidar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChronoMessages.lidar)
  // repeated .ChronoMessages.Vector points = 1;
  for (unsigned int i = 0, n = this->points_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->points(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ChronoMessages.lidar)
}

::google::protobuf::uint8* lidar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChronoMessages.lidar)
  // repeated .ChronoMessages.Vector points = 1;
  for (unsigned int i = 0, n = this->points_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->points(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChronoMessages.lidar)
  return target;
}

int lidar::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ChronoMessages.lidar)
  int total_size = 0;

  // repeated .ChronoMessages.Vector points = 1;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lidar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChronoMessages.lidar)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const lidar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const lidar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChronoMessages.lidar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChronoMessages.lidar)
    MergeFrom(*source);
  }
}

void lidar::MergeFrom(const lidar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChronoMessages.lidar)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  points_.MergeFrom(from.points_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void lidar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChronoMessages.lidar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lidar::CopyFrom(const lidar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChronoMessages.lidar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lidar::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->points())) return false;
  return true;
}

void lidar::Swap(lidar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void lidar::InternalSwap(lidar* other) {
  points_.UnsafeArenaSwap(&other->points_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata lidar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lidar_descriptor_;
  metadata.reflection = lidar_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// lidar

// repeated .ChronoMessages.Vector points = 1;
int lidar::points_size() const {
  return points_.size();
}
void lidar::clear_points() {
  points_.Clear();
}
const ::ChronoMessages::Vector& lidar::points(int index) const {
  // @@protoc_insertion_point(field_get:ChronoMessages.lidar.points)
  return points_.Get(index);
}
::ChronoMessages::Vector* lidar::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:ChronoMessages.lidar.points)
  return points_.Mutable(index);
}
::ChronoMessages::Vector* lidar::add_points() {
  // @@protoc_insertion_point(field_add:ChronoMessages.lidar.points)
  return points_.Add();
}
::google::protobuf::RepeatedPtrField< ::ChronoMessages::Vector >*
lidar::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:ChronoMessages.lidar.points)
  return &points_;
}
const ::google::protobuf::RepeatedPtrField< ::ChronoMessages::Vector >&
lidar::points() const {
  // @@protoc_insertion_point(field_list:ChronoMessages.lidar.points)
  return points_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int gps::kLongitudeFieldNumber;
const int gps::kLatitudeFieldNumber;
const int gps::kAltitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

gps::gps()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChronoMessages.gps)
}

void gps::InitAsDefaultInstance() {
}

gps::gps(const gps& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChronoMessages.gps)
}

void gps::SharedCtor() {
  _cached_size_ = 0;
  longitude_ = 0;
  latitude_ = 0;
  altitude_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gps::~gps() {
  // @@protoc_insertion_point(destructor:ChronoMessages.gps)
  SharedDtor();
}

void gps::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gps_descriptor_;
}

const gps& gps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_5fmessages_2eproto();
  return *default_instance_;
}

gps* gps::default_instance_ = NULL;

gps* gps::New(::google::protobuf::Arena* arena) const {
  gps* n = new gps;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void gps::Clear() {
// @@protoc_insertion_point(message_clear_start:ChronoMessages.gps)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(gps, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<gps*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(longitude_, altitude_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool gps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChronoMessages.gps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double longitude = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_latitude;
        break;
      }

      // required double latitude = 2;
      case 2: {
        if (tag == 17) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_altitude;
        break;
      }

      // required double altitude = 3;
      case 3: {
        if (tag == 25) {
         parse_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
          set_has_altitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChronoMessages.gps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChronoMessages.gps)
  return false;
#undef DO_
}

void gps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChronoMessages.gps)
  // required double longitude = 1;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->longitude(), output);
  }

  // required double latitude = 2;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latitude(), output);
  }

  // required double altitude = 3;
  if (has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->altitude(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ChronoMessages.gps)
}

::google::protobuf::uint8* gps::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChronoMessages.gps)
  // required double longitude = 1;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->longitude(), target);
  }

  // required double latitude = 2;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->latitude(), target);
  }

  // required double altitude = 3;
  if (has_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->altitude(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChronoMessages.gps)
  return target;
}

int gps::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ChronoMessages.gps)
  int total_size = 0;

  if (has_longitude()) {
    // required double longitude = 1;
    total_size += 1 + 8;
  }

  if (has_latitude()) {
    // required double latitude = 2;
    total_size += 1 + 8;
  }

  if (has_altitude()) {
    // required double altitude = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
int gps::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ChronoMessages.gps)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double longitude = 1;
    total_size += 1 + 8;

    // required double latitude = 2;
    total_size += 1 + 8;

    // required double altitude = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gps::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChronoMessages.gps)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const gps* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const gps>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChronoMessages.gps)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChronoMessages.gps)
    MergeFrom(*source);
  }
}

void gps::MergeFrom(const gps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChronoMessages.gps)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_altitude()) {
      set_altitude(from.altitude());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void gps::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChronoMessages.gps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gps::CopyFrom(const gps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChronoMessages.gps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gps::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void gps::Swap(gps* other) {
  if (other == this) return;
  InternalSwap(other);
}
void gps::InternalSwap(gps* other) {
  std::swap(longitude_, other->longitude_);
  std::swap(latitude_, other->latitude_);
  std::swap(altitude_, other->altitude_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata gps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gps_descriptor_;
  metadata.reflection = gps_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// gps

// required double longitude = 1;
bool gps::has_longitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void gps::set_has_longitude() {
  _has_bits_[0] |= 0x00000001u;
}
void gps::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000001u;
}
void gps::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
 double gps::longitude() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.gps.longitude)
  return longitude_;
}
 void gps::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.gps.longitude)
}

// required double latitude = 2;
bool gps::has_latitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void gps::set_has_latitude() {
  _has_bits_[0] |= 0x00000002u;
}
void gps::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000002u;
}
void gps::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
 double gps::latitude() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.gps.latitude)
  return latitude_;
}
 void gps::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.gps.latitude)
}

// required double altitude = 3;
bool gps::has_altitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void gps::set_has_altitude() {
  _has_bits_[0] |= 0x00000004u;
}
void gps::clear_has_altitude() {
  _has_bits_[0] &= ~0x00000004u;
}
void gps::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
 double gps::altitude() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.gps.altitude)
  return altitude_;
}
 void gps::set_altitude(double value) {
  set_has_altitude();
  altitude_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.gps.altitude)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int imu::kAngularVelocityFieldNumber;
const int imu::kLinearAccelerationFieldNumber;
const int imu::kOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

imu::imu()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChronoMessages.imu)
}

void imu::InitAsDefaultInstance() {
  angular_velocity_ = const_cast< ::ChronoMessages::Vector*>(&::ChronoMessages::Vector::default_instance());
  linear_acceleration_ = const_cast< ::ChronoMessages::Vector*>(&::ChronoMessages::Vector::default_instance());
  orientation_ = const_cast< ::ChronoMessages::Vector*>(&::ChronoMessages::Vector::default_instance());
}

imu::imu(const imu& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChronoMessages.imu)
}

void imu::SharedCtor() {
  _cached_size_ = 0;
  angular_velocity_ = NULL;
  linear_acceleration_ = NULL;
  orientation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

imu::~imu() {
  // @@protoc_insertion_point(destructor:ChronoMessages.imu)
  SharedDtor();
}

void imu::SharedDtor() {
  if (this != default_instance_) {
    delete angular_velocity_;
    delete linear_acceleration_;
    delete orientation_;
  }
}

void imu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* imu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return imu_descriptor_;
}

const imu& imu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_5fmessages_2eproto();
  return *default_instance_;
}

imu* imu::default_instance_ = NULL;

imu* imu::New(::google::protobuf::Arena* arena) const {
  imu* n = new imu;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void imu::Clear() {
// @@protoc_insertion_point(message_clear_start:ChronoMessages.imu)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_angular_velocity()) {
      if (angular_velocity_ != NULL) angular_velocity_->::ChronoMessages::Vector::Clear();
    }
    if (has_linear_acceleration()) {
      if (linear_acceleration_ != NULL) linear_acceleration_->::ChronoMessages::Vector::Clear();
    }
    if (has_orientation()) {
      if (orientation_ != NULL) orientation_->::ChronoMessages::Vector::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool imu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChronoMessages.imu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ChronoMessages.Vector angular_velocity = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_linear_acceleration;
        break;
      }

      // required .ChronoMessages.Vector linear_acceleration = 2;
      case 2: {
        if (tag == 18) {
         parse_linear_acceleration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_acceleration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_orientation;
        break;
      }

      // required .ChronoMessages.Vector orientation = 3;
      case 3: {
        if (tag == 26) {
         parse_orientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChronoMessages.imu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChronoMessages.imu)
  return false;
#undef DO_
}

void imu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChronoMessages.imu)
  // required .ChronoMessages.Vector angular_velocity = 1;
  if (has_angular_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->angular_velocity_, output);
  }

  // required .ChronoMessages.Vector linear_acceleration = 2;
  if (has_linear_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->linear_acceleration_, output);
  }

  // required .ChronoMessages.Vector orientation = 3;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->orientation_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ChronoMessages.imu)
}

::google::protobuf::uint8* imu::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChronoMessages.imu)
  // required .ChronoMessages.Vector angular_velocity = 1;
  if (has_angular_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->angular_velocity_, false, target);
  }

  // required .ChronoMessages.Vector linear_acceleration = 2;
  if (has_linear_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->linear_acceleration_, false, target);
  }

  // required .ChronoMessages.Vector orientation = 3;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->orientation_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChronoMessages.imu)
  return target;
}

int imu::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ChronoMessages.imu)
  int total_size = 0;

  if (has_angular_velocity()) {
    // required .ChronoMessages.Vector angular_velocity = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angular_velocity_);
  }

  if (has_linear_acceleration()) {
    // required .ChronoMessages.Vector linear_acceleration = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->linear_acceleration_);
  }

  if (has_orientation()) {
    // required .ChronoMessages.Vector orientation = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_);
  }

  return total_size;
}
int imu::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ChronoMessages.imu)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .ChronoMessages.Vector angular_velocity = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angular_velocity_);

    // required .ChronoMessages.Vector linear_acceleration = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->linear_acceleration_);

    // required .ChronoMessages.Vector orientation = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void imu::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChronoMessages.imu)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const imu* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const imu>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChronoMessages.imu)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChronoMessages.imu)
    MergeFrom(*source);
  }
}

void imu::MergeFrom(const imu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChronoMessages.imu)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_angular_velocity()) {
      mutable_angular_velocity()->::ChronoMessages::Vector::MergeFrom(from.angular_velocity());
    }
    if (from.has_linear_acceleration()) {
      mutable_linear_acceleration()->::ChronoMessages::Vector::MergeFrom(from.linear_acceleration());
    }
    if (from.has_orientation()) {
      mutable_orientation()->::ChronoMessages::Vector::MergeFrom(from.orientation());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void imu::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChronoMessages.imu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void imu::CopyFrom(const imu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChronoMessages.imu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool imu::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_angular_velocity()) {
    if (!this->angular_velocity_->IsInitialized()) return false;
  }
  if (has_linear_acceleration()) {
    if (!this->linear_acceleration_->IsInitialized()) return false;
  }
  if (has_orientation()) {
    if (!this->orientation_->IsInitialized()) return false;
  }
  return true;
}

void imu::Swap(imu* other) {
  if (other == this) return;
  InternalSwap(other);
}
void imu::InternalSwap(imu* other) {
  std::swap(angular_velocity_, other->angular_velocity_);
  std::swap(linear_acceleration_, other->linear_acceleration_);
  std::swap(orientation_, other->orientation_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata imu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = imu_descriptor_;
  metadata.reflection = imu_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// imu

// required .ChronoMessages.Vector angular_velocity = 1;
bool imu::has_angular_velocity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void imu::set_has_angular_velocity() {
  _has_bits_[0] |= 0x00000001u;
}
void imu::clear_has_angular_velocity() {
  _has_bits_[0] &= ~0x00000001u;
}
void imu::clear_angular_velocity() {
  if (angular_velocity_ != NULL) angular_velocity_->::ChronoMessages::Vector::Clear();
  clear_has_angular_velocity();
}
const ::ChronoMessages::Vector& imu::angular_velocity() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.imu.angular_velocity)
  return angular_velocity_ != NULL ? *angular_velocity_ : *default_instance_->angular_velocity_;
}
::ChronoMessages::Vector* imu::mutable_angular_velocity() {
  set_has_angular_velocity();
  if (angular_velocity_ == NULL) {
    angular_velocity_ = new ::ChronoMessages::Vector;
  }
  // @@protoc_insertion_point(field_mutable:ChronoMessages.imu.angular_velocity)
  return angular_velocity_;
}
::ChronoMessages::Vector* imu::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:ChronoMessages.imu.angular_velocity)
  clear_has_angular_velocity();
  ::ChronoMessages::Vector* temp = angular_velocity_;
  angular_velocity_ = NULL;
  return temp;
}
void imu::set_allocated_angular_velocity(::ChronoMessages::Vector* angular_velocity) {
  delete angular_velocity_;
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    set_has_angular_velocity();
  } else {
    clear_has_angular_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:ChronoMessages.imu.angular_velocity)
}

// required .ChronoMessages.Vector linear_acceleration = 2;
bool imu::has_linear_acceleration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void imu::set_has_linear_acceleration() {
  _has_bits_[0] |= 0x00000002u;
}
void imu::clear_has_linear_acceleration() {
  _has_bits_[0] &= ~0x00000002u;
}
void imu::clear_linear_acceleration() {
  if (linear_acceleration_ != NULL) linear_acceleration_->::ChronoMessages::Vector::Clear();
  clear_has_linear_acceleration();
}
const ::ChronoMessages::Vector& imu::linear_acceleration() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.imu.linear_acceleration)
  return linear_acceleration_ != NULL ? *linear_acceleration_ : *default_instance_->linear_acceleration_;
}
::ChronoMessages::Vector* imu::mutable_linear_acceleration() {
  set_has_linear_acceleration();
  if (linear_acceleration_ == NULL) {
    linear_acceleration_ = new ::ChronoMessages::Vector;
  }
  // @@protoc_insertion_point(field_mutable:ChronoMessages.imu.linear_acceleration)
  return linear_acceleration_;
}
::ChronoMessages::Vector* imu::release_linear_acceleration() {
  // @@protoc_insertion_point(field_release:ChronoMessages.imu.linear_acceleration)
  clear_has_linear_acceleration();
  ::ChronoMessages::Vector* temp = linear_acceleration_;
  linear_acceleration_ = NULL;
  return temp;
}
void imu::set_allocated_linear_acceleration(::ChronoMessages::Vector* linear_acceleration) {
  delete linear_acceleration_;
  linear_acceleration_ = linear_acceleration;
  if (linear_acceleration) {
    set_has_linear_acceleration();
  } else {
    clear_has_linear_acceleration();
  }
  // @@protoc_insertion_point(field_set_allocated:ChronoMessages.imu.linear_acceleration)
}

// required .ChronoMessages.Vector orientation = 3;
bool imu::has_orientation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void imu::set_has_orientation() {
  _has_bits_[0] |= 0x00000004u;
}
void imu::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000004u;
}
void imu::clear_orientation() {
  if (orientation_ != NULL) orientation_->::ChronoMessages::Vector::Clear();
  clear_has_orientation();
}
const ::ChronoMessages::Vector& imu::orientation() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.imu.orientation)
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
::ChronoMessages::Vector* imu::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) {
    orientation_ = new ::ChronoMessages::Vector;
  }
  // @@protoc_insertion_point(field_mutable:ChronoMessages.imu.orientation)
  return orientation_;
}
::ChronoMessages::Vector* imu::release_orientation() {
  // @@protoc_insertion_point(field_release:ChronoMessages.imu.orientation)
  clear_has_orientation();
  ::ChronoMessages::Vector* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
void imu::set_allocated_orientation(::ChronoMessages::Vector* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
  // @@protoc_insertion_point(field_set_allocated:ChronoMessages.imu.orientation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int vehicle::kXFieldNumber;
const int vehicle::kYFieldNumber;
const int vehicle::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

vehicle::vehicle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChronoMessages.vehicle)
}

void vehicle::InitAsDefaultInstance() {
}

vehicle::vehicle(const vehicle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChronoMessages.vehicle)
}

void vehicle::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vehicle::~vehicle() {
  // @@protoc_insertion_point(destructor:ChronoMessages.vehicle)
  SharedDtor();
}

void vehicle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void vehicle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vehicle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vehicle_descriptor_;
}

const vehicle& vehicle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_5fmessages_2eproto();
  return *default_instance_;
}

vehicle* vehicle::default_instance_ = NULL;

vehicle* vehicle::New(::google::protobuf::Arena* arena) const {
  vehicle* n = new vehicle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void vehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:ChronoMessages.vehicle)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(vehicle, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<vehicle*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool vehicle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChronoMessages.vehicle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // required double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChronoMessages.vehicle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChronoMessages.vehicle)
  return false;
#undef DO_
}

void vehicle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChronoMessages.vehicle)
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ChronoMessages.vehicle)
}

::google::protobuf::uint8* vehicle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChronoMessages.vehicle)
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // required double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChronoMessages.vehicle)
  return target;
}

int vehicle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ChronoMessages.vehicle)
  int total_size = 0;

  if (has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  if (has_z()) {
    // required double z = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
int vehicle::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ChronoMessages.vehicle)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

    // required double z = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vehicle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChronoMessages.vehicle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const vehicle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const vehicle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChronoMessages.vehicle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChronoMessages.vehicle)
    MergeFrom(*source);
  }
}

void vehicle::MergeFrom(const vehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChronoMessages.vehicle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void vehicle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChronoMessages.vehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vehicle::CopyFrom(const vehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChronoMessages.vehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vehicle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void vehicle::Swap(vehicle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void vehicle::InternalSwap(vehicle* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata vehicle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vehicle_descriptor_;
  metadata.reflection = vehicle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// vehicle

// required double x = 1;
bool vehicle::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void vehicle::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void vehicle::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void vehicle::clear_x() {
  x_ = 0;
  clear_has_x();
}
 double vehicle::x() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.vehicle.x)
  return x_;
}
 void vehicle::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.vehicle.x)
}

// required double y = 2;
bool vehicle::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void vehicle::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void vehicle::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void vehicle::clear_y() {
  y_ = 0;
  clear_has_y();
}
 double vehicle::y() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.vehicle.y)
  return y_;
}
 void vehicle::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.vehicle.y)
}

// required double z = 3;
bool vehicle::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void vehicle::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void vehicle::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void vehicle::clear_z() {
  z_ = 0;
  clear_has_z();
}
 double vehicle::z() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.vehicle.z)
  return z_;
}
 void vehicle::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.vehicle.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int control::kThrottleFieldNumber;
const int control::kSteeringFieldNumber;
const int control::kBrakingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

control::control()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChronoMessages.control)
}

void control::InitAsDefaultInstance() {
}

control::control(const control& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChronoMessages.control)
}

void control::SharedCtor() {
  _cached_size_ = 0;
  throttle_ = 0;
  steering_ = 0;
  braking_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

control::~control() {
  // @@protoc_insertion_point(destructor:ChronoMessages.control)
  SharedDtor();
}

void control::SharedDtor() {
  if (this != default_instance_) {
  }
}

void control::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* control::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return control_descriptor_;
}

const control& control::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_5fmessages_2eproto();
  return *default_instance_;
}

control* control::default_instance_ = NULL;

control* control::New(::google::protobuf::Arena* arena) const {
  control* n = new control;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void control::Clear() {
// @@protoc_insertion_point(message_clear_start:ChronoMessages.control)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(control, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<control*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(throttle_, braking_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool control::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChronoMessages.control)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double throttle = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_)));
          set_has_throttle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_steering;
        break;
      }

      // required double steering = 2;
      case 2: {
        if (tag == 17) {
         parse_steering:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_)));
          set_has_steering();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_braking;
        break;
      }

      // required double braking = 3;
      case 3: {
        if (tag == 25) {
         parse_braking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &braking_)));
          set_has_braking();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChronoMessages.control)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChronoMessages.control)
  return false;
#undef DO_
}

void control::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChronoMessages.control)
  // required double throttle = 1;
  if (has_throttle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->throttle(), output);
  }

  // required double steering = 2;
  if (has_steering()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->steering(), output);
  }

  // required double braking = 3;
  if (has_braking()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->braking(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ChronoMessages.control)
}

::google::protobuf::uint8* control::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChronoMessages.control)
  // required double throttle = 1;
  if (has_throttle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->throttle(), target);
  }

  // required double steering = 2;
  if (has_steering()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->steering(), target);
  }

  // required double braking = 3;
  if (has_braking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->braking(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChronoMessages.control)
  return target;
}

int control::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ChronoMessages.control)
  int total_size = 0;

  if (has_throttle()) {
    // required double throttle = 1;
    total_size += 1 + 8;
  }

  if (has_steering()) {
    // required double steering = 2;
    total_size += 1 + 8;
  }

  if (has_braking()) {
    // required double braking = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
int control::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ChronoMessages.control)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double throttle = 1;
    total_size += 1 + 8;

    // required double steering = 2;
    total_size += 1 + 8;

    // required double braking = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void control::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChronoMessages.control)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const control* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const control>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChronoMessages.control)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChronoMessages.control)
    MergeFrom(*source);
  }
}

void control::MergeFrom(const control& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChronoMessages.control)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_throttle()) {
      set_throttle(from.throttle());
    }
    if (from.has_steering()) {
      set_steering(from.steering());
    }
    if (from.has_braking()) {
      set_braking(from.braking());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void control::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChronoMessages.control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void control::CopyFrom(const control& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChronoMessages.control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool control::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void control::Swap(control* other) {
  if (other == this) return;
  InternalSwap(other);
}
void control::InternalSwap(control* other) {
  std::swap(throttle_, other->throttle_);
  std::swap(steering_, other->steering_);
  std::swap(braking_, other->braking_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata control::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = control_descriptor_;
  metadata.reflection = control_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// control

// required double throttle = 1;
bool control::has_throttle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void control::set_has_throttle() {
  _has_bits_[0] |= 0x00000001u;
}
void control::clear_has_throttle() {
  _has_bits_[0] &= ~0x00000001u;
}
void control::clear_throttle() {
  throttle_ = 0;
  clear_has_throttle();
}
 double control::throttle() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.control.throttle)
  return throttle_;
}
 void control::set_throttle(double value) {
  set_has_throttle();
  throttle_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.control.throttle)
}

// required double steering = 2;
bool control::has_steering() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void control::set_has_steering() {
  _has_bits_[0] |= 0x00000002u;
}
void control::clear_has_steering() {
  _has_bits_[0] &= ~0x00000002u;
}
void control::clear_steering() {
  steering_ = 0;
  clear_has_steering();
}
 double control::steering() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.control.steering)
  return steering_;
}
 void control::set_steering(double value) {
  set_has_steering();
  steering_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.control.steering)
}

// required double braking = 3;
bool control::has_braking() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void control::set_has_braking() {
  _has_bits_[0] |= 0x00000004u;
}
void control::clear_has_braking() {
  _has_bits_[0] &= ~0x00000004u;
}
void control::clear_braking() {
  braking_ = 0;
  clear_has_braking();
}
 double control::braking() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.control.braking)
  return braking_;
}
 void control::set_braking(double value) {
  set_has_braking();
  braking_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.control.braking)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int time::kTFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

time::time()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChronoMessages.time)
}

void time::InitAsDefaultInstance() {
}

time::time(const time& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChronoMessages.time)
}

void time::SharedCtor() {
  _cached_size_ = 0;
  t_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

time::~time() {
  // @@protoc_insertion_point(destructor:ChronoMessages.time)
  SharedDtor();
}

void time::SharedDtor() {
  if (this != default_instance_) {
  }
}

void time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* time::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return time_descriptor_;
}

const time& time::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_5fmessages_2eproto();
  return *default_instance_;
}

time* time::default_instance_ = NULL;

time* time::New(::google::protobuf::Arena* arena) const {
  time* n = new time;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void time::Clear() {
// @@protoc_insertion_point(message_clear_start:ChronoMessages.time)
  t_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChronoMessages.time)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double t = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_)));
          set_has_t();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChronoMessages.time)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChronoMessages.time)
  return false;
#undef DO_
}

void time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChronoMessages.time)
  // required double t = 1;
  if (has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->t(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ChronoMessages.time)
}

::google::protobuf::uint8* time::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChronoMessages.time)
  // required double t = 1;
  if (has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->t(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChronoMessages.time)
  return target;
}

int time::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ChronoMessages.time)
  int total_size = 0;

  // required double t = 1;
  if (has_t()) {
    total_size += 1 + 8;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void time::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChronoMessages.time)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const time* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const time>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChronoMessages.time)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChronoMessages.time)
    MergeFrom(*source);
  }
}

void time::MergeFrom(const time& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChronoMessages.time)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_t()) {
      set_t(from.t());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void time::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChronoMessages.time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void time::CopyFrom(const time& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChronoMessages.time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool time::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void time::Swap(time* other) {
  if (other == this) return;
  InternalSwap(other);
}
void time::InternalSwap(time* other) {
  std::swap(t_, other->t_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata time::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = time_descriptor_;
  metadata.reflection = time_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// time

// required double t = 1;
bool time::has_t() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void time::set_has_t() {
  _has_bits_[0] |= 0x00000001u;
}
void time::clear_has_t() {
  _has_bits_[0] &= ~0x00000001u;
}
void time::clear_t() {
  t_ = 0;
  clear_has_t();
}
 double time::t() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.time.t)
  return t_;
}
 void time::set_t(double value) {
  set_has_t();
  t_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.time.t)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int light::kXposFieldNumber;
const int light::kYposFieldNumber;
const int light::kXdirFieldNumber;
const int light::kYdirFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

light::light()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChronoMessages.light)
}

void light::InitAsDefaultInstance() {
}

light::light(const light& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChronoMessages.light)
}

void light::SharedCtor() {
  _cached_size_ = 0;
  xpos_ = 0;
  ypos_ = 0;
  xdir_ = 0;
  ydir_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

light::~light() {
  // @@protoc_insertion_point(destructor:ChronoMessages.light)
  SharedDtor();
}

void light::SharedDtor() {
  if (this != default_instance_) {
  }
}

void light::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* light::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return light_descriptor_;
}

const light& light::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_5fmessages_2eproto();
  return *default_instance_;
}

light* light::default_instance_ = NULL;

light* light::New(::google::protobuf::Arena* arena) const {
  light* n = new light;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void light::Clear() {
// @@protoc_insertion_point(message_clear_start:ChronoMessages.light)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(light, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<light*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(xpos_, ydir_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool light::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChronoMessages.light)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double xpos = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xpos_)));
          set_has_xpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_ypos;
        break;
      }

      // required double ypos = 2;
      case 2: {
        if (tag == 17) {
         parse_ypos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_xdir;
        break;
      }

      // required double xdir = 3;
      case 3: {
        if (tag == 25) {
         parse_xdir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xdir_)));
          set_has_xdir();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_ydir;
        break;
      }

      // required double ydir = 4;
      case 4: {
        if (tag == 33) {
         parse_ydir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ydir_)));
          set_has_ydir();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChronoMessages.light)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChronoMessages.light)
  return false;
#undef DO_
}

void light::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChronoMessages.light)
  // required double xpos = 1;
  if (has_xpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->xpos(), output);
  }

  // required double ypos = 2;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ypos(), output);
  }

  // required double xdir = 3;
  if (has_xdir()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->xdir(), output);
  }

  // required double ydir = 4;
  if (has_ydir()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ydir(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ChronoMessages.light)
}

::google::protobuf::uint8* light::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChronoMessages.light)
  // required double xpos = 1;
  if (has_xpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->xpos(), target);
  }

  // required double ypos = 2;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ypos(), target);
  }

  // required double xdir = 3;
  if (has_xdir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->xdir(), target);
  }

  // required double ydir = 4;
  if (has_ydir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ydir(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChronoMessages.light)
  return target;
}

int light::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ChronoMessages.light)
  int total_size = 0;

  if (has_xpos()) {
    // required double xpos = 1;
    total_size += 1 + 8;
  }

  if (has_ypos()) {
    // required double ypos = 2;
    total_size += 1 + 8;
  }

  if (has_xdir()) {
    // required double xdir = 3;
    total_size += 1 + 8;
  }

  if (has_ydir()) {
    // required double ydir = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
int light::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ChronoMessages.light)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double xpos = 1;
    total_size += 1 + 8;

    // required double ypos = 2;
    total_size += 1 + 8;

    // required double xdir = 3;
    total_size += 1 + 8;

    // required double ydir = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void light::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChronoMessages.light)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const light* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const light>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChronoMessages.light)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChronoMessages.light)
    MergeFrom(*source);
  }
}

void light::MergeFrom(const light& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChronoMessages.light)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xpos()) {
      set_xpos(from.xpos());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
    if (from.has_xdir()) {
      set_xdir(from.xdir());
    }
    if (from.has_ydir()) {
      set_ydir(from.ydir());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void light::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChronoMessages.light)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void light::CopyFrom(const light& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChronoMessages.light)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool light::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void light::Swap(light* other) {
  if (other == this) return;
  InternalSwap(other);
}
void light::InternalSwap(light* other) {
  std::swap(xpos_, other->xpos_);
  std::swap(ypos_, other->ypos_);
  std::swap(xdir_, other->xdir_);
  std::swap(ydir_, other->ydir_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata light::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = light_descriptor_;
  metadata.reflection = light_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// light

// required double xpos = 1;
bool light::has_xpos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void light::set_has_xpos() {
  _has_bits_[0] |= 0x00000001u;
}
void light::clear_has_xpos() {
  _has_bits_[0] &= ~0x00000001u;
}
void light::clear_xpos() {
  xpos_ = 0;
  clear_has_xpos();
}
 double light::xpos() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.light.xpos)
  return xpos_;
}
 void light::set_xpos(double value) {
  set_has_xpos();
  xpos_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.light.xpos)
}

// required double ypos = 2;
bool light::has_ypos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void light::set_has_ypos() {
  _has_bits_[0] |= 0x00000002u;
}
void light::clear_has_ypos() {
  _has_bits_[0] &= ~0x00000002u;
}
void light::clear_ypos() {
  ypos_ = 0;
  clear_has_ypos();
}
 double light::ypos() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.light.ypos)
  return ypos_;
}
 void light::set_ypos(double value) {
  set_has_ypos();
  ypos_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.light.ypos)
}

// required double xdir = 3;
bool light::has_xdir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void light::set_has_xdir() {
  _has_bits_[0] |= 0x00000004u;
}
void light::clear_has_xdir() {
  _has_bits_[0] &= ~0x00000004u;
}
void light::clear_xdir() {
  xdir_ = 0;
  clear_has_xdir();
}
 double light::xdir() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.light.xdir)
  return xdir_;
}
 void light::set_xdir(double value) {
  set_has_xdir();
  xdir_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.light.xdir)
}

// required double ydir = 4;
bool light::has_ydir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void light::set_has_ydir() {
  _has_bits_[0] |= 0x00000008u;
}
void light::clear_has_ydir() {
  _has_bits_[0] &= ~0x00000008u;
}
void light::clear_ydir() {
  ydir_ = 0;
  clear_has_ydir();
}
 double light::ydir() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.light.ydir)
  return ydir_;
}
 void light::set_ydir(double value) {
  set_has_ydir();
  ydir_ = value;
  // @@protoc_insertion_point(field_set:ChronoMessages.light.ydir)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cones::kBlueConesFieldNumber;
const int cones::kYellowConesFieldNumber;
const int cones::kOrangeConesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cones::cones()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChronoMessages.cones)
}

void cones::InitAsDefaultInstance() {
}

cones::cones(const cones& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChronoMessages.cones)
}

void cones::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cones::~cones() {
  // @@protoc_insertion_point(destructor:ChronoMessages.cones)
  SharedDtor();
}

void cones::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cones::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cones::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cones_descriptor_;
}

const cones& cones::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_5fmessages_2eproto();
  return *default_instance_;
}

cones* cones::default_instance_ = NULL;

cones* cones::New(::google::protobuf::Arena* arena) const {
  cones* n = new cones;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void cones::Clear() {
// @@protoc_insertion_point(message_clear_start:ChronoMessages.cones)
  blue_cones_.Clear();
  yellow_cones_.Clear();
  orange_cones_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool cones::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChronoMessages.cones)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ChronoMessages.Vector blue_cones = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_blue_cones:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_blue_cones()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_blue_cones;
        if (input->ExpectTag(18)) goto parse_loop_yellow_cones;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .ChronoMessages.Vector yellow_cones = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_yellow_cones:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_yellow_cones()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_yellow_cones;
        if (input->ExpectTag(26)) goto parse_loop_orange_cones;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .ChronoMessages.Vector orange_cones = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_orange_cones:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_orange_cones()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_orange_cones;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChronoMessages.cones)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChronoMessages.cones)
  return false;
#undef DO_
}

void cones::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChronoMessages.cones)
  // repeated .ChronoMessages.Vector blue_cones = 1;
  for (unsigned int i = 0, n = this->blue_cones_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->blue_cones(i), output);
  }

  // repeated .ChronoMessages.Vector yellow_cones = 2;
  for (unsigned int i = 0, n = this->yellow_cones_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->yellow_cones(i), output);
  }

  // repeated .ChronoMessages.Vector orange_cones = 3;
  for (unsigned int i = 0, n = this->orange_cones_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->orange_cones(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ChronoMessages.cones)
}

::google::protobuf::uint8* cones::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChronoMessages.cones)
  // repeated .ChronoMessages.Vector blue_cones = 1;
  for (unsigned int i = 0, n = this->blue_cones_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->blue_cones(i), false, target);
  }

  // repeated .ChronoMessages.Vector yellow_cones = 2;
  for (unsigned int i = 0, n = this->yellow_cones_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->yellow_cones(i), false, target);
  }

  // repeated .ChronoMessages.Vector orange_cones = 3;
  for (unsigned int i = 0, n = this->orange_cones_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->orange_cones(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChronoMessages.cones)
  return target;
}

int cones::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ChronoMessages.cones)
  int total_size = 0;

  // repeated .ChronoMessages.Vector blue_cones = 1;
  total_size += 1 * this->blue_cones_size();
  for (int i = 0; i < this->blue_cones_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blue_cones(i));
  }

  // repeated .ChronoMessages.Vector yellow_cones = 2;
  total_size += 1 * this->yellow_cones_size();
  for (int i = 0; i < this->yellow_cones_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->yellow_cones(i));
  }

  // repeated .ChronoMessages.Vector orange_cones = 3;
  total_size += 1 * this->orange_cones_size();
  for (int i = 0; i < this->orange_cones_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->orange_cones(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cones::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChronoMessages.cones)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const cones* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cones>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChronoMessages.cones)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChronoMessages.cones)
    MergeFrom(*source);
  }
}

void cones::MergeFrom(const cones& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChronoMessages.cones)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  blue_cones_.MergeFrom(from.blue_cones_);
  yellow_cones_.MergeFrom(from.yellow_cones_);
  orange_cones_.MergeFrom(from.orange_cones_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void cones::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChronoMessages.cones)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cones::CopyFrom(const cones& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChronoMessages.cones)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cones::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->blue_cones())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->yellow_cones())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->orange_cones())) return false;
  return true;
}

void cones::Swap(cones* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cones::InternalSwap(cones* other) {
  blue_cones_.UnsafeArenaSwap(&other->blue_cones_);
  yellow_cones_.UnsafeArenaSwap(&other->yellow_cones_);
  orange_cones_.UnsafeArenaSwap(&other->orange_cones_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata cones::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cones_descriptor_;
  metadata.reflection = cones_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// cones

// repeated .ChronoMessages.Vector blue_cones = 1;
int cones::blue_cones_size() const {
  return blue_cones_.size();
}
void cones::clear_blue_cones() {
  blue_cones_.Clear();
}
const ::ChronoMessages::Vector& cones::blue_cones(int index) const {
  // @@protoc_insertion_point(field_get:ChronoMessages.cones.blue_cones)
  return blue_cones_.Get(index);
}
::ChronoMessages::Vector* cones::mutable_blue_cones(int index) {
  // @@protoc_insertion_point(field_mutable:ChronoMessages.cones.blue_cones)
  return blue_cones_.Mutable(index);
}
::ChronoMessages::Vector* cones::add_blue_cones() {
  // @@protoc_insertion_point(field_add:ChronoMessages.cones.blue_cones)
  return blue_cones_.Add();
}
::google::protobuf::RepeatedPtrField< ::ChronoMessages::Vector >*
cones::mutable_blue_cones() {
  // @@protoc_insertion_point(field_mutable_list:ChronoMessages.cones.blue_cones)
  return &blue_cones_;
}
const ::google::protobuf::RepeatedPtrField< ::ChronoMessages::Vector >&
cones::blue_cones() const {
  // @@protoc_insertion_point(field_list:ChronoMessages.cones.blue_cones)
  return blue_cones_;
}

// repeated .ChronoMessages.Vector yellow_cones = 2;
int cones::yellow_cones_size() const {
  return yellow_cones_.size();
}
void cones::clear_yellow_cones() {
  yellow_cones_.Clear();
}
const ::ChronoMessages::Vector& cones::yellow_cones(int index) const {
  // @@protoc_insertion_point(field_get:ChronoMessages.cones.yellow_cones)
  return yellow_cones_.Get(index);
}
::ChronoMessages::Vector* cones::mutable_yellow_cones(int index) {
  // @@protoc_insertion_point(field_mutable:ChronoMessages.cones.yellow_cones)
  return yellow_cones_.Mutable(index);
}
::ChronoMessages::Vector* cones::add_yellow_cones() {
  // @@protoc_insertion_point(field_add:ChronoMessages.cones.yellow_cones)
  return yellow_cones_.Add();
}
::google::protobuf::RepeatedPtrField< ::ChronoMessages::Vector >*
cones::mutable_yellow_cones() {
  // @@protoc_insertion_point(field_mutable_list:ChronoMessages.cones.yellow_cones)
  return &yellow_cones_;
}
const ::google::protobuf::RepeatedPtrField< ::ChronoMessages::Vector >&
cones::yellow_cones() const {
  // @@protoc_insertion_point(field_list:ChronoMessages.cones.yellow_cones)
  return yellow_cones_;
}

// repeated .ChronoMessages.Vector orange_cones = 3;
int cones::orange_cones_size() const {
  return orange_cones_.size();
}
void cones::clear_orange_cones() {
  orange_cones_.Clear();
}
const ::ChronoMessages::Vector& cones::orange_cones(int index) const {
  // @@protoc_insertion_point(field_get:ChronoMessages.cones.orange_cones)
  return orange_cones_.Get(index);
}
::ChronoMessages::Vector* cones::mutable_orange_cones(int index) {
  // @@protoc_insertion_point(field_mutable:ChronoMessages.cones.orange_cones)
  return orange_cones_.Mutable(index);
}
::ChronoMessages::Vector* cones::add_orange_cones() {
  // @@protoc_insertion_point(field_add:ChronoMessages.cones.orange_cones)
  return orange_cones_.Add();
}
::google::protobuf::RepeatedPtrField< ::ChronoMessages::Vector >*
cones::mutable_orange_cones() {
  // @@protoc_insertion_point(field_mutable_list:ChronoMessages.cones.orange_cones)
  return &orange_cones_;
}
const ::google::protobuf::RepeatedPtrField< ::ChronoMessages::Vector >&
cones::orange_cones() const {
  // @@protoc_insertion_point(field_list:ChronoMessages.cones.orange_cones)
  return orange_cones_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int exit::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

exit::exit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChronoMessages.exit)
}

void exit::InitAsDefaultInstance() {
}

exit::exit(const exit& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChronoMessages.exit)
}

void exit::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

exit::~exit() {
  // @@protoc_insertion_point(destructor:ChronoMessages.exit)
  SharedDtor();
}

void exit::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void exit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* exit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return exit_descriptor_;
}

const exit& exit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_5fmessages_2eproto();
  return *default_instance_;
}

exit* exit::default_instance_ = NULL;

exit* exit::New(::google::protobuf::Arena* arena) const {
  exit* n = new exit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void exit::Clear() {
// @@protoc_insertion_point(message_clear_start:ChronoMessages.exit)
  if (has_code()) {
    code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool exit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChronoMessages.exit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string code = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ChronoMessages.exit.code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChronoMessages.exit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChronoMessages.exit)
  return false;
#undef DO_
}

void exit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChronoMessages.exit)
  // required string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ChronoMessages.exit.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ChronoMessages.exit)
}

::google::protobuf::uint8* exit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChronoMessages.exit)
  // required string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ChronoMessages.exit.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChronoMessages.exit)
  return target;
}

int exit::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ChronoMessages.exit)
  int total_size = 0;

  // required string code = 1;
  if (has_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void exit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChronoMessages.exit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const exit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const exit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChronoMessages.exit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChronoMessages.exit)
    MergeFrom(*source);
  }
}

void exit::MergeFrom(const exit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChronoMessages.exit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void exit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChronoMessages.exit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void exit::CopyFrom(const exit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChronoMessages.exit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool exit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void exit::Swap(exit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void exit::InternalSwap(exit* other) {
  code_.Swap(&other->code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata exit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = exit_descriptor_;
  metadata.reflection = exit_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// exit

// required string code = 1;
bool exit::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void exit::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
void exit::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void exit::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
 const ::std::string& exit::code() const {
  // @@protoc_insertion_point(field_get:ChronoMessages.exit.code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void exit::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChronoMessages.exit.code)
}
 void exit::set_code(const char* value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChronoMessages.exit.code)
}
 void exit::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChronoMessages.exit.code)
}
 ::std::string* exit::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:ChronoMessages.exit.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* exit::release_code() {
  // @@protoc_insertion_point(field_release:ChronoMessages.exit.code)
  clear_has_code();
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void exit::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:ChronoMessages.exit.code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ChronoMessages

// @@protoc_insertion_point(global_scope)
